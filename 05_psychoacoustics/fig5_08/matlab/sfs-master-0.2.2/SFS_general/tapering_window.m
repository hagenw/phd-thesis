function win = tapering_window(x0,conf)
%TAPWIN generate a tapering window for a loudspeaker array
%
%   Usage: win = tapering_window(x0,[conf])
%
%   Input parameters:
%       x0          - secondary source positions
%       conf        - optional configuration struct (see SFS_config)
%
%   Output parameters:
%       win     - tapering window (nlsx1)
%
%   TAPERING_WINDOW(xo,conf) generates a tapering window for a secondary source
%   distribution given by x0. The window is created from a squared Hann window.
%   If the secondary source distribution has some gaps, every joint part gets
%   its own tapering.
%
%   see also: secondary_source_position, wave_field_wfs_25d, hann

%*****************************************************************************
% Copyright (c) 2010-2012 Quality & Usability Lab                            *
%                         Deutsche Telekom Laboratories, TU Berlin           *
%                         Ernst-Reuter-Platz 7, 10587 Berlin, Germany        *
%                                                                            *
% This file is part of the Sound Field Synthesis-Toolbox (SFS).              *
%                                                                            *
% The SFS is free software:  you can redistribute it and/or modify it  under *
% the terms of the  GNU  General  Public  License  as published by the  Free *
% Software Foundation, either version 3 of the License,  or (at your option) *
% any later version.                                                         *
%                                                                            *
% The SFS is distributed in the hope that it will be useful, but WITHOUT ANY *
% WARRANTY;  without even the implied warranty of MERCHANTABILITY or FITNESS *
% FOR A PARTICULAR PURPOSE.                                                  *
% See the GNU General Public License for more details.                       *
%                                                                            *
% You should  have received a copy  of the GNU General Public License  along *
% with this program.  If not, see <http://www.gnu.org/licenses/>.            *
%                                                                            *
% The SFS is a toolbox for Matlab/Octave to  simulate and  investigate sound *
% field  synthesis  methods  like  wave  field  synthesis  or  higher  order *
% ambisonics.                                                                *
%                                                                            *
% http://dev.qu.tu-berlin.de/projects/sfs-toolbox       sfstoolbox@gmail.com *
%*****************************************************************************


%% ===== Checking of input  parameters ==================================
nargmin = 1;
nargmax = 2;
narginchk(nargmin,nargmax);
isargsecondarysource(x0);
if nargin==nargmax-1
    conf = SFS_config;
end
isargstruct(conf);


%% ===== Configuration ==================================================
dx0 = conf.dx0;
usetapwin = conf.usetapwin;
tapwinlen = conf.tapwinlen;


%% ===== Calculation =====================================================
% number of speakers
nls = size(x0,1);
if usetapwin && nls>2
    win = ones(1,nls);
    % use only positions
    x0 = x0(:,1:3);
    % TODO: check if the calculation of dx0 can be done in a better way. Note, that
    % we can not just use conf.dx0, because if the positions of the loudspeakers
    % were not generated by secondary_source_positions, but entered manually, there
    % will be no meaningfull conf.dx0.
    % calculate the distance between the speakers
    dx0 = norm(x0(1,:)-x0(2,:));
    % it is possible that the first distance is already a gap in the array. hence,
    % we calculate the second distance and choose it if it is smaller
    dx0_2 = norm(x0(2,:)-x0(3,:));
    if dx0_2<dx0
        dx0=dx0_2;
    end
    % find the edges of the array
    edges = [];
    for ii=1:nls-1
        if norm(x0(ii,:)-x0(ii+1,:))>2*dx0
            edges = [edges; ii; ii+1];
        end
    end
    if norm(x0(end,:)-x0(1,:))>2*dx0
        edges = [edges; nls; 1];
    end
    % if we have any edges in our array apply a tapering window for every array
    % part, consiting of two edges
    if length(edges)>0
        % generate tapwin for every array part within the x0 vector
        for ii=2:length(edges)-2
            part_nls = edges(ii+1)-edges(ii)+1;
            win(edges(ii):edges(ii+1)) = part_hann_win(part_nls,tapwinlen);
        end
        % generate tapwin for every array part consiting of the first and the
        % last edge within the x0 vector
        if edges(1)==nls
            part_nls = nls;
            win = part_hann_win(nls,tapwinlen);
        else
            part_nls = edges(1) + nls-edges(end)+1;
            part_win = part_hann_win(part_nls,tapwinlen);
            win(1:edges(1)) = part_win(end-edges(1)+1:end);
            win(edges(end):end) = part_win(1:end-edges(end)+1);
        end
    end
else
    % If you want to use no tapering window:
    win = ones(1,nls);
end

% Ensure the window will be a column vector
win = column_vector(win);

end

function win = part_hann_win(nls,tapwinlen)
    % Length of window (given by the value of tapwinlen). The window will be
    % splitted to both sides of the loudspeaker array.
    lenwin = round(tapwinlen*nls)+2;
    %
    % Check if we have a to short window to apply it in a useful way. This can
    % be the case for very short loudspeaker arrays (as used in Wierstorf2010).
    if lenwin<4
        win = ones(1,nls);
    else
        % Create a squared Hann window with length lenwin
        %    -
        %   | |
        % _|   |_
        hannwin = hann(lenwin).^2;
        % Create tapering window
        % NOTE: the first and the last entry generated by hann are 0. Therefore we
        % are using the squared Hann window from its second sample until its
        % second last one.
        win = [hannwin(2:ceil(end/2))' ...
               ones(1,nls-lenwin+2) ...
               hannwin(ceil(end/2)+1:end-1)'];
    end
end
